---
import "../styles/global.css";
import Footer from "../components/Footer.astro";
import RelatedPosts from "../components/RelatedPosts.astro";

// ========



// Gera rotas para todos os posts
export async function getStaticPaths() {
  const posts = await getCollection("products");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Recebe o post como prop
const { post } = Astro.props;

const { Content } = await post.render();

// Busca posts relacionados (mesma categoria)
const allPosts = await getCollection("products");
type PostType = typeof allPosts[0];

// Primeiro tenta encontrar posts da mesma categoria
const categoryPosts = allPosts.filter(
  (p) => p.slug !== post.slug && p.data.category === post.data.category
);

// Se não houver posts suficientes da mesma categoria, complementa com posts de tags relacionadas
let relatedPosts: PostType[] = [];

if (categoryPosts.length >= 3) {
  // Se tivermos 3 ou mais posts da mesma categoria, usamos apenas esses
  relatedPosts = categoryPosts
    .sort(() => Math.random() - 0.5) // Ordem aleatória
    .slice(0, 3);
} else {
  // Adiciona todos os posts da mesma categoria
  relatedPosts = [...categoryPosts];
  
  // Complementa com posts que compartilham tags
  if (post.data.tags && post.data.tags.length > 0) {
    const tagPosts = allPosts.filter(
      (p) =>
        p.slug !== post.slug &&
        !relatedPosts.some(rp => rp.slug === p.slug) && // Evita duplicatas
        p.data.tags &&
        p.data.tags.some((tag) => post.data.tags?.includes(tag))
    );
    
    // Adiciona posts com tags relacionadas até completar 3 posts
    relatedPosts = [...relatedPosts, ...tagPosts.slice(0, 3 - relatedPosts.length)];
  }
  
  // Se ainda não tivermos 3 posts, adiciona posts aleatórios
  if (relatedPosts.length < 3) {
    const remainingPosts = allPosts.filter(
      (p) => 
        p.slug !== post.slug && 
        !relatedPosts.some(rp => rp.slug === p.slug)
    );
    
    relatedPosts = [
      ...relatedPosts,
      ...remainingPosts
        .sort(() => Math.random() - 0.5)
        .slice(0, 3 - relatedPosts.length)
    ];
  }
}
// =======

interface Props {
	title?: string;
	description?: string;
}

const {
	title = "Nutra24 - Health Products and Supplements",
	description = "Discover premium health supplements and wellness products. Expert-reviewed nutraceuticals for optimal health and well-being.",
} = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="robots" content="index, follow" />
		<meta name="googlebot" content="index, follow" />
		<meta name="author" content="Nutra24" />
		<meta name="language" content="English" />
		<meta name="revisit-after" content="7 days" />
		<link rel="sitemap" href="/sitemap-index.xml" />
		<link rel="manifest" href="/manifest.json" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="apple-touch-icon" href="/favicon.svg" />
		<meta name="theme-color" content="#234338" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Quicksand:wght@400;500;600;700&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript>
			<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Quicksand:wght@400;500;600;700&display=swap">
		</noscript>
		<title>{title}</title>
		<meta name="description" content={description} />
		<slot name="SEO" />
	</head>
	<body class="bg-white text-gray-800 font-sans min-h-screen flex flex-col w-full h-full">
		<slot />
		 
  <RelatedPosts
  
    posts={relatedPosts}
    title="Related Supplements"
    slot="after-content"
  />
		<Footer />
	</body>
</html>
