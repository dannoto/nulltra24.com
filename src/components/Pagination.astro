---
// Define the props for the Pagination component
export interface Props {
  currentPage: number;
  totalPages: number;
  prevUrl?: string;
  nextUrl?: string;
}

const { currentPage, totalPages, prevUrl, nextUrl } = Astro.props;

// Calculate page numbers to show
const pageNumbers = [];
const maxPagesToShow = 5;

let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

// Adjust if we're near the end
if (endPage - startPage + 1 < maxPagesToShow && startPage > 1) {
  startPage = Math.max(1, endPage - maxPagesToShow + 1);
}

for (let i = startPage; i <= endPage; i++) {
  pageNumbers.push(i);
}
---

<nav aria-label="Pagination" class="flex justify-center mt-8 mb-10">
  <ul class="inline-flex -space-x-px text-base h-10">
    <!-- Previous page button -->
    {prevUrl ? (
      <li>
        <a href={prevUrl} class="flex items-center justify-center px-4 h-10 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700">
          <span class="sr-only">Previous</span>
          <svg class="w-3 h-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
          </svg>
        </a>
      </li>
    ) : (
      <li>
        <span class="flex items-center justify-center px-4 h-10 ms-0 leading-tight text-gray-300 bg-white border border-e-0 border-gray-300 rounded-s-lg cursor-not-allowed">
          <span class="sr-only">Previous</span>
          <svg class="w-3 h-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
          </svg>
        </span>
      </li>
    )}

    <!-- Page numbers -->
    {pageNumbers.map((page) => (
      <li>
        <a 
          href={page === 1 ? '/' : `/page/${page}`}
          class={`flex items-center justify-center px-4 h-10 leading-tight ${
            page === currentPage 
              ? 'text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700' 
              : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700'
          }`}
        >
          {page}
        </a>
      </li>
    ))}

    <!-- Next page button -->
    {nextUrl ? (
      <li>
        <a href={nextUrl} class="flex items-center justify-center px-4 h-10 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700">
          <span class="sr-only">Next</span>
          <svg class="w-3 h-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 9l4-4-4-4"/>
          </svg>
        </a>
      </li>
    ) : (
      <li>
        <span class="flex items-center justify-center px-4 h-10 leading-tight text-gray-300 bg-white border border-gray-300 rounded-e-lg cursor-not-allowed">
          <span class="sr-only">Next</span>
          <svg class="w-3 h-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 9l4-4-4-4"/>
          </svg>
        </span>
      </li>
    )}
  </ul>
</nav>
